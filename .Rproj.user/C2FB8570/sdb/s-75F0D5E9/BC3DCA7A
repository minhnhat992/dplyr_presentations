{
    "collab_server" : "",
    "contents" : "<style>\nbody {\n    overflow: scroll;\n}\n</style>\n\n\n```{r, include=FALSE}\nlibrary(dplyr)\n\n```\n\nData Wrangling with R\n========================================================\nauthor: Minh Bui\ndate: 3/24/2017\nautosize: true\nfont-family: \"Arial\"\nwidth: 1500\n\n\n\nSo, What is Data Wrangling ?\n========================================================\nManipulate your \"raw\" data into different forms\n\nExamples\n\n* Filtering/sorting data\n\n* Calculate new columns from existing Ones\n\n* Removing or rename empty cells/values\n\n* Merge/join different table together\n\n* Create Excel-like pivot tables to summarize your data\n\n\n\nWhy is it important ?\n========================================================\n\n- 80% of a data scientist's time will be spent on cleaning data\n\n\n- Your boss will likely ask you to do it!\n\n\n\nWhy use R for data manipulation ?\n========================================================\n\n- Faster than Excel\n\n- Automate the process, no more manual works!\n\n- Huge support on data wrangling. You can manipulate date using either :\n    + Base R codes\n    + Packages such as [**dplyr**](https://cran.r-project.org/web/packages/dplyr/vignettes/introduction.html) \n    \n\nSo, What is dplyr ? Why you should know it ?\n========================================================\n- It is an [**R package**](http://www.statmethods.net/interface/packages.html) - program that someone wrote and shared to the public\n\n- Created by Hadley Wickham\n\n- Advantages over base R\n + Faster\n + Easier to learn and understand\n \nDataset - Diamonds\n========================================================\n\nLet's use an example of the popular Diamonds dataset.\n\n```{r eval=FALSE}\n# packages to install \ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n```\n```{r, echo=TRUE}\nlibrary(ggplot2)\nhead(diamonds)\n```\n\ndplyr - Single Table Verbs\n========================================================\n- The core components of dplyr\n\n- Main verbs provide basic function for data manipulation\n  + filter()  : Filtering data by rows\n  + arrange() : Sorting\n  + select()  : Choose columns\n  + mutate()  : Create new columns\n  + summarise() : summarize table\n  \n- These verbs can be used by itself or in combination!\n\n\nExample - Filter Rows with filters()\n========================================================\nincremental: true\n\n- filter() allows you to get a subset of rows based on different criteria \n- Diamonds with \"Ideal\" cut?\n```{r}\nlibrary(dplyr)\n\nfilter(diamonds, cut == \"Ideal\")\n```\n\n- Diamonds with \"Ideal\" cut and price over 400 ?\n```{r}\nfilter(diamonds, cut == \"Ideal\", price > 400)\n```\n\n- Diamonds with either \"Ideal\" or \"Premium\" cut\n```{r}\nfilter(diamonds, cut == \"Ideal\" | cut == \"Premium\")\n```\n\n\nExample - Sort Rows with arrange()\n========================================================\nincremental: true\n- Use arrange() to reorders your table based on criteria\n\n- Sort diamonds based on price \n```{r}\narrange(diamonds, price)\n```\n\n- Use desc() to sort descending\n```{r}\narrange(diamonds, desc(price))\n```\n\n\nExample - Select columns with select()\n========================================================\nincremental: true\n\n- select() help you keep or remove columns\n- Keep *carat*, *cut* and *color* columns\n```{r}\nselect(diamonds, carat, cut, color)\n```\n\n- Alternate way\n```{r}\nselect(diamonds, carat : color)\n```\n\n- Remove *carat* from table\n```{r}\nselect(diamonds, -carat)\n```\n\n- You can also rename columns with select()\n```{r}\nselect(diamonds, new_color = color)\n```\n\n- If you want to keep all of the columns, use rename() instead\n```{r}\nrename(diamonds, new_color = color)\n```\n\nExample - Add new columns with mutate()\n========================================================\nincremental: true\n\n- mutate() allows you to create new columns from existing ones\n\n- What's price per carat ?\n```{r, eval = FALSE}\nmutate(diamonds, 'price per carat' = price/carat)\n```\n\n```{r, echo=FALSE}\ndiamonds %>% \n  select(carat, cut, color, clarity, price) %>% \n  mutate('price per carat' = price/carat)\n```\n\nExample - Summarise values with summarise()\n========================================================\nincremental: true\n- summarise() allows you to compute statistics (averange, max , min)\n\n- What's the average price in this table?\n```{r}\nsummarise(diamonds, average_price = mean(price))\n```\n\n- You can create an Excel-like pivot table with summarise() and group_by ()\n\n- What's the average price for each *cut* ?\n```{r}\ngroup_by_cut <- group_by(diamonds, cut)\n\nsummarise(group_by_cut, average_price = mean(price))\n```\n\n- How about average carat and depth for each cut ?\n```{r}\nsummarise(group_by_cut, average_size = mean(carat), average_depth = mean(depth))\n```\n\n- Common functions (*sum*,*mean*, *max*, *min*, *count*, etc.)\n\n\nChainning in dplyr\n========================================================\n- The reason why dplyr is popular!\n\n- Use this symbol %>%  to create a data pipelines\n + We use %>% to connect one command from each other.\n + The *output* of one command becomes the *input* for the next\n \n- Make elegant and readable codes !\n\nExamples of Chainning\n========================================================\nincremental: true\n- What we want to do:\n + Filter \"Premium\" cut\n + Keep only *carat*, *cut*, *color*, *depth*, *price*\n + Create a new column, named \"price_per_carat\"\n \n- Without chainning , your codes will look like this\n```{r}\ndata <- filter(diamonds, cut == \"Premium\")\ndata <- select(data, carat, cut, color, depth, price)\ndata <- mutate(data, price_per_carat = price/carat )\n\ndata\n```\n\n- Much nicer with chainning (I think...):\n```{r}\ndiamonds %>% \n  filter(cut == \"Premium\") %>% \n  select(carat, cut, color, depth, price) %>% \n  mutate(price_per_carat = price/carat)\n```\n\n- You can keep the chain forerver!\n```{r}\n# find the average price for each color and cut !\ndiamonds %>% \n  filter(cut == \"Premium\") %>% \n  select(carat, cut, color, depth, price) %>% \n  mutate(price_per_carat = price/carat) %>% \n  group_by(cut, color) %>% \n  summarise(average_price = mean(price))\n```\n\nAdditional Information on Dplyr\n========================================================\n\n- This quick tutorial (https://cran.r-project.org/web/packages/dplyr/vignettes/introduction.html)\n- [Dplyr's cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n\nThank You!\n========================================================\n\n- LinkedIn : https://www.linkedin.com/in/minhbui1/\n\n- Source Codes for this presentation : https://github.com/minhnhat992/dplyr_presentations/tree/master\n\n",
    "created" : 1490284210153.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2059539424",
    "id" : "BC3DCA7A",
    "lastKnownWriteTime" : 1490285609,
    "last_content_update" : 1490285609960,
    "path" : "E:/R/presentations/Dplyr_Presentation.Rpres",
    "project_path" : "Dplyr_Presentation.Rpres",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}